
import java.awt.Color;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Date;
import java.text.DateFormat; 
import java.text.SimpleDateFormat; 

/**
 * This frame is where new users are created
 * @author student
 */
public class CreateNewUserFrame extends javax.swing.JFrame {

    /**
     * Creates new form CreateNewUserFrame
     */
    public CreateNewUserFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLoginName = new javax.swing.JLabel();
        lblFullName = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        txtLoginName = new javax.swing.JTextField();
        txtStatusBar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        txtBalance = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblLoginName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblLoginName.setText("Login Name:");

        lblFullName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblFullName.setText("Full Name:");

        lblEmail.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblEmail.setText("Email:");

        lblPassword.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPassword.setText("Password:");

        lblBalance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBalance.setText("Account Balance:");

        txtFullName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFullNameKeyPressed(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmailKeyPressed(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        txtLoginName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtLoginName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLoginNameFocusLost(evt);
            }
        });
        txtLoginName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLoginNameKeyPressed(evt);
            }
        });

        txtStatusBar.setBackground(java.awt.Color.lightGray);
        txtStatusBar.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        txtStatusBar.setText("Create New User");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Enter In All The Information Below");

        btnSubmit.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSubmit.setText("Submit New User");
        btnSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSubmitMouseClicked(evt);
            }
        });

        txtBalance.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtStatusBar)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblBalance, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLoginName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFullName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSubmit)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtEmail)
                        .addComponent(txtPassword)
                        .addComponent(txtLoginName)
                        .addComponent(txtBalance)
                        .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFullName)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoginName)
                    .addComponent(txtLoginName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBalance)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(txtStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closing CreateNewUserFrame opens a new instance of the LoginFrame
     * If window is closed with a login name and password, 
     * Then feed those variables to the new LoginFrame.
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (txtLoginName.getText().isEmpty()||txtPassword.getText().isEmpty()){
            LoginFrame lf = new LoginFrame();
            lf.setVisible(true);
        }
        else {
            LoginFrame lf = new LoginFrame(txtLoginName.getText(),txtPassword.getText());
            lf.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * Verify data is valid and inserts into appropriate tables
     * @param evt 
     */
    private void btnSubmitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubmitMouseClicked
        //Verify fields are valid before continuing
        if (verifyFields()){
            //Update SQL tables with new user
            if (uniqueLoginName(txtLoginName.getText())){
                ResultSet rs1;
                String sql1 = "INSERT INTO USERS (LOGINNAME,PASSWORD,FULLNAME,EMAIL)"
                        + " VALUES ('"+txtLoginName.getText()+"',"
                        + " '"+txtPassword.getText()+"', '"+txtFullName.getText()+"',"
                        + " '"+txtEmail.getText()+"')";
                String sql2 = "SELECT * FROM USERS";
                try {
                    Connection conn = SimpleDataSource.getConnection();
                    PreparedStatement stat1 = conn.prepareStatement(sql1);
                    PreparedStatement stat2 = conn.prepareStatement(sql2);
                    stat1.executeUpdate();
                    rs1 = stat2.executeQuery();
                    while (rs1.next()){
                        //Update Accounts table with balance, date and user id
                        if (rs1.getString("LOGINNAME").equals(txtLoginName.getText())){
                            int uid = rs1.getInt("USERID");
                            Double bal = Double.parseDouble(
                                    txtBalance.getText().replace(",", ""));
                            Date date = new Date();
                            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
                            String asOfDate = formatter.format(date);
                            String sql3 = "INSERT INTO "
                                    + "ACCOUNTS (USERID,BALANCE,ASOFDATE) "
                                    + "VALUES ("+uid+", "+bal+", "
                                    + "'"+asOfDate+"')";
                            PreparedStatement stat3 = conn.prepareStatement(sql3);
                            stat3.executeUpdate();
                        }
                    }
                    conn.close();
                    txtStatusBar.setText("New user created!");
                    txtStatusBar.setBackground(Color.lightGray);
                    txtStatusBar.repaint();
                } catch(Exception e){
                    System.out.println("ERROR: "+e.getMessage());
                }
            }
            else{
                txtStatusBar.setText("This login name already exists");
                txtStatusBar.setBackground(Color.red);
                txtStatusBar.repaint();
            }
        } 
    }//GEN-LAST:event_btnSubmitMouseClicked

    /**
     * Verify fields and return true if all user input is valid
     * If any of the user input is invalid, return false
     * @return 
     */
    private boolean verifyFields(){
        //Verify fields are not empty
        if (txtLoginName.getText().isEmpty()){
            txtStatusBar.setText("Login Name is empty");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return false;
        }
        else if (txtFullName.getText().isEmpty()){
            txtStatusBar.setText("Full Name is empty");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return false;
        }
        else if (txtEmail.getText().isEmpty()){
            txtStatusBar.setText("Email is empty");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return false;
        }
        else if (txtPassword.getText().isEmpty()){
            txtStatusBar.setText("Password is empty");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return false;
        }
        else if (txtBalance.getText().isEmpty()){
            txtStatusBar.setText("Account balance is empty");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return false;
        }
        else{
            txtStatusBar.setText("All fields filled");
            txtStatusBar.setBackground(Color.lightGray);
            txtStatusBar.repaint();
        }
        
        //Verify Full Name has at least one space
        if (txtFullName.getText().contains(" ")==false){
            txtStatusBar.setText("You must enter your full name, "
                    + "which should include a space somewhere.");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return false;
        }
        
        //Verify Email has one "@" symbol and ends in ".com"
        if (!txtEmail.getText().contains("@") && 
                txtEmail.getText().substring(
                        txtEmail.getText().length()-4)!=".com"){
            txtStatusBar.setText("You must enter a valid email address.");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return false;
        }
        return true;
    }
    
    /**
     * Prevent user from entering more than the SQL table allows (100 chars)
     * @param evt 
     */
    private void txtFullNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFullNameKeyPressed
        if (txtFullName.getText().length()>49){
            txtFullName.setText(txtFullName.getText().substring(1,50));
        }
    }//GEN-LAST:event_txtFullNameKeyPressed

    /**
     * Prevent user from entering more than the SQL table allows (100 chars)
     * @param evt 
     */
    private void txtEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyPressed
        if (txtEmail.getText().length()>49){
            txtEmail.setText(txtEmail.getText().substring(1,50));
        }
    }//GEN-LAST:event_txtEmailKeyPressed

    /**
     * Prevent user from entering more than the SQL table allows (20 chars)
     * @param evt 
     */
    private void txtLoginNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLoginNameKeyPressed
        if (txtLoginName.getText().length()>19){
            txtLoginName.setText(txtLoginName.getText().substring(1,20));
        }
    }//GEN-LAST:event_txtLoginNameKeyPressed

    /**
     * Prevent user from entering more than the SQL table allows (20 chars)
     * @param evt 
     */
    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        if (txtPassword.getText().length()>19){
            txtPassword.setText(txtPassword.getText().substring(1,20));
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    /**
     * Verify the Login Name does not already exist
     * Sets the loginNameUnique class variable to true if unique
     * @param evt 
     */
    private void txtLoginNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLoginNameFocusLost
        //Verify field isn't blank first
        if (txtLoginName.getText().isEmpty()){
            txtStatusBar.setText("Login Name is empty");
            txtStatusBar.setBackground(Color.red);
            txtStatusBar.repaint();
            return;
        }
        
        //Verify login name unique and update status bar
        uniqueLoginName();
    }//GEN-LAST:event_txtLoginNameFocusLost

    /**
     * Verify login name is unique
     * @param ln
     * @return 
     */
    private boolean uniqueLoginName(String ln){
        //Query USERS table to see if name already exists
        ResultSet rs1;
        String sql1 = "SELECT * FROM USERS WHERE LOGINNAME='"+ln+"'";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat1 = conn.prepareStatement(sql1);
            rs1 = stat1.executeQuery();
            if (!rs1.next()==false){
                txtStatusBar.setText("Login Name already exists");
                txtStatusBar.setBackground(Color.red);
                txtStatusBar.repaint();
                return false;
            }
            else{
                txtStatusBar.setText("Login Name is valid");
                txtStatusBar.setBackground(Color.lightGray);
                txtStatusBar.repaint();
            }
            conn.close();
        } catch(Exception e){
            System.out.println("ERROR: "+e.getMessage());
            return false;
        }
        return true;
    }
    
    /**
     * Verify the entered login name is unique
     * sets the status bar with the results
     */
    private void uniqueLoginName(){
        //Query USERS table to see if name already exists
        ResultSet rs1;
        String sql1 = "SELECT * FROM USERS "
                + "WHERE LOGINNAME='"+txtLoginName.getText()+"'";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat1 = conn.prepareStatement(sql1);
            rs1 = stat1.executeQuery();
            if (!rs1.next()==false){
                txtStatusBar.setText("Login Name already exists");
                txtStatusBar.setBackground(Color.red);
                txtStatusBar.repaint();
            }
            else{
                txtStatusBar.setText("Login Name is valid");
                txtStatusBar.setBackground(Color.lightGray);
                txtStatusBar.repaint();
            }
            conn.close();
        } catch(Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateNewUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateNewUserFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblLoginName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JFormattedTextField txtBalance;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtLoginName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtStatusBar;
    // End of variables declaration//GEN-END:variables
}
