import java.awt.Color;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Date;
import java.text.DateFormat; 
import java.text.SimpleDateFormat; 
import javax.swing.table.DefaultTableModel;

/**
 * Provides the budget balances and items for the instantiated budgeteer object
 * passed to it from the login frame
 * @author student
 */
public class BudgetFrame extends javax.swing.JFrame {
    private BudgeteerSQL budgeteer; //budgeteer object
    
    /**
     * Creates new form SimpleBudgetFrame
     */
    public BudgetFrame() {
        initComponents();
    }

    /**
     * Creates new form SimpleBudgetFrame using the current user ID settings 
     * @param UID
     */
    public BudgetFrame(int UID) {
        initComponents();
        this.budgeteer = new BudgeteerSQL(UID);
        txtStatusBar.setText("Welcome "+this.budgeteer.returnFullName());
        loadSimpleBudget();
    }
    
    /**
     * Loads the table with the simpler version of the budget
     */
    private void loadSimpleBudget(){
        try{
            clearTable();
            DefaultTableModel model = (DefaultTableModel) tblBudget.getModel();
            model.addRow(new Object[]{"As Of Date: ", this.budgeteer.returnAsOfDate()}); 
            model.addRow(new Object[]{"Account Beginning Balance: ", this.budgeteer.returnBalance()}); 
            model.addRow(new Object[]{"Income Items Total: ", this.budgeteer.returnIncomeItemsSum()}); 
            model.addRow(new Object[]{"Expense Items Total: ", this.budgeteer.returnExpenseItemsSum()});
            model.addRow(new Object[]{"Account Ending Balance", this.budgeteer.returnEndingBalance()}); 
        } catch (Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }
    
    /**
     * Loads the table with the detailed version of the budget
     * that lists out every income and expense item
     */
    private void loadDetailBudget(){
        try{
            clearTable();
            DefaultTableModel model = (DefaultTableModel) tblBudget.getModel();
            model.addRow(new Object[]{"As Of Date: ", this.budgeteer.returnAsOfDate()}); 
            model.addRow(new Object[]{"Account Beginning Balance: ", this.budgeteer.returnBalance()});
            
            String[][] arrIncome = this.budgeteer.returnIncomeItemsDetails();
            for (String[] array1 : arrIncome) {
                model.addRow(new Object[]{array1[0]+" (income) ", array1[1]});
            }
            
            String[][] arrExpense = this.budgeteer.returnExpenseItemsDetails();
            for (String[] array2 : arrExpense){
                model.addRow(new Object[]{array2[0]+" (expense) ", array2[1]});
            }
            
            model.addRow(new Object[]{"Account Ending Balance", this.budgeteer.returnEndingBalance()}); 
        } catch (Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }
    
    /**
     * Used to clear the existing data in the table 
     * whenever loading a budget to the table
     */
    private void clearTable(){
        try{
            DefaultTableModel model = (DefaultTableModel) tblBudget.getModel();
            model.getDataVector().removeAllElements();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
        } catch (Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        txtStatusBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBudget = new javax.swing.JTable();
        btnSaveEndBal = new javax.swing.JButton();
        menuSimpleBudget = new javax.swing.JMenuBar();
        menuLoadSimple = new javax.swing.JMenu();
        menuLoadDetail = new javax.swing.JMenu();
        menuEditItems = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtStatusBar.setEditable(false);
        txtStatusBar.setBackground(java.awt.Color.lightGray);
        txtStatusBar.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        txtStatusBar.setText("Welcome budgeteer!");
        txtStatusBar.setToolTipText("");

        tblBudget.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblBudget.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblBudget.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBudget);

        btnSaveEndBal.setText("Save Ending Balance");
        btnSaveEndBal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveEndBalMouseClicked(evt);
            }
        });

        menuLoadSimple.setText("Load Simple Budget");
        menuLoadSimple.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuLoadSimpleMouseClicked(evt);
            }
        });
        menuSimpleBudget.add(menuLoadSimple);

        menuLoadDetail.setText("Load Detail Budget");
        menuLoadDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuLoadDetailMouseClicked(evt);
            }
        });
        menuSimpleBudget.add(menuLoadDetail);

        menuEditItems.setText("Edit Budget Items");
        menuEditItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEditItemsMouseClicked(evt);
            }
        });
        menuSimpleBudget.add(menuEditItems);

        setJMenuBar(menuSimpleBudget);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtStatusBar)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSaveEndBal)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSaveEndBal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Used to load the simple budget on mouse click
     * @param evt 
     */
    private void menuLoadSimpleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuLoadSimpleMouseClicked
        loadSimpleBudget();
    }//GEN-LAST:event_menuLoadSimpleMouseClicked

    /**
     * used to load the detailed budget on mouse click
     * @param evt 
     */
    private void menuLoadDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuLoadDetailMouseClicked
        loadDetailBudget();
    }//GEN-LAST:event_menuLoadDetailMouseClicked

    /**
     * Used to save the ending balance of an account
     * @param evt 
     */
    private void btnSaveEndBalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveEndBalMouseClicked
        try {
            //Convert String to double
            Date date = new Date();
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            String asOfDate = formatter.format(date);
            Double bal = Double.parseDouble(this.budgeteer.returnEndingBalance().replace(",", ""));
            String sql1 = "UPDATE accounts "
                    + "SET balance = "+bal+", asofdate = '"+asOfDate+"' "
                    + "WHERE userid = "+this.budgeteer.getUid()+"";
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat1 = conn.prepareStatement(sql1);
            stat1.executeUpdate();
            conn.close();
            txtStatusBar.setText("New balance saved! Reload the tables to see new balance.");
        } catch(Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }//GEN-LAST:event_btnSaveEndBalMouseClicked

    /**
     * Opens the BudgetItemsFrame for the user to edit or add items to their budget
     * @param evt 
     */
    private void menuEditItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEditItemsMouseClicked
        BudgetItemsFrame items = new BudgetItemsFrame(this.budgeteer);
        items.setVisible(true);
    }//GEN-LAST:event_menuEditItemsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BudgetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BudgetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BudgetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BudgetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BudgetFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveEndBal;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuEditItems;
    private javax.swing.JMenu menuLoadDetail;
    private javax.swing.JMenu menuLoadSimple;
    private javax.swing.JMenuBar menuSimpleBudget;
    private javax.swing.JTable tblBudget;
    private javax.swing.JTextField txtStatusBar;
    // End of variables declaration//GEN-END:variables
}
