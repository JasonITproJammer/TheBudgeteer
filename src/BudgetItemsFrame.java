
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author student
 */
public class BudgetItemsFrame extends javax.swing.JFrame {
    private BudgeteerSQL budgeteer; //budgeteer object
    private boolean newItem = true; //new item
    
    /**
     * Creates new form BudgetItemsFrame
     */
    public BudgetItemsFrame() {
        initComponents();
        jList1.getSelectionModel().setSelectionInterval(0,0);
    }
    
    /**
     * Creates new form BudgetItemsFrame
     * while being passed the budgeteer object
     * @param user 
     */
    public BudgetItemsFrame(BudgeteerSQL user) {
        initComponents();
        this.budgeteer = user;
        jList1.getSelectionModel().setSelectionInterval(0,0);
        loadTable();
    }
    
    /**
     * Loads the items table with the most current
     * income and expense items for the user to view or edit
     */
    private void loadTable(){
        try{
            clearTable();
            DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
            String[][] arr1 = this.budgeteer.returnItemsTypeName();
            String[][] arr2 = this.budgeteer.returnItemsAmtDesc();
            for(int i = 0; i < arr1.length; i++){
                model.addRow(new Object[]{arr1[i][0], arr1[i][1], arr2[i][0], arr2[i][1]});
            }
        } catch (Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }
    
    /**
     * Clears the table of old data
     */
    private void clearTable(){
        try{
            DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
            model.getDataVector().removeAllElements();
        } catch (Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtStatusBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        lblItemType = new javax.swing.JLabel();
        lblShortName = new javax.swing.JLabel();
        lblAmount = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        txtAmount = new javax.swing.JFormattedTextField();
        txtShortName = new javax.swing.JTextField();
        lstItemType = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        btnSave = new javax.swing.JButton();
        btnEditItem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtStatusBar.setBackground(java.awt.Color.lightGray);
        txtStatusBar.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        txtStatusBar.setText("Welcome to Budget Items");

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Type", "Short Name", "Amount", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblItems);

        lblItemType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblItemType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblItemType.setText("Item Type: ");

        lblShortName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblShortName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblShortName.setText("Short Name: ");

        lblAmount.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAmount.setText("Amount: ");

        lblDescription.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDescription.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDescription.setText("Description: ");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        txtAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtAmount.setToolTipText("");

        txtShortName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtShortName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtShortNameFocusLost(evt);
            }
        });

        jList1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "income", "expense" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jList1.setToolTipText("");
        lstItemType.setViewportView(jList1);

        btnSave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSave.setText("Save New Item");
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });

        btnEditItem.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnEditItem.setText("Edit Selected Item");
        btnEditItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditItemMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtStatusBar)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblShortName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblItemType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtAmount)
                                .addComponent(lstItemType, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                            .addComponent(txtShortName, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 324, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblItemType)
                    .addComponent(lstItemType, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblShortName)
                    .addComponent(txtShortName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAmount)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnEditItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Loads the selected table item's data into the form above for editing
     * @param evt 
     */
    private void btnEditItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditItemMouseClicked
        btnSave.setText("Save Changes");
        txtShortName.setEditable(false);
        this.newItem = false;
        String shortName = tblItems.getValueAt(tblItems.getSelectedRow(), 1).toString();
        try {
            ResultSet rs1;
            String sql1 = "SELECT * FROM budgetitems WHERE shortname='"+shortName+"'";
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat1 = conn.prepareStatement(sql1);
            rs1 = stat1.executeQuery();
            while (rs1.next()){
                if(rs1.getString("ITEMTYPE")=="income"){
                    jList1.getSelectionModel().setSelectionInterval(0,0);
                }
                else{
                    jList1.getSelectionModel().setSelectionInterval(0,1);
                }
                txtShortName.setText(rs1.getString("SHORTNAME"));
                txtAmount.setText(String.valueOf(rs1.getDouble("AMOUNT")));
                jTextArea1.setText(rs1.getString("DESCRIPTION"));
            }
            conn.close();
        } catch(Exception e){
            System.out.println("ERROR: "+e.getMessage());
        }
    }//GEN-LAST:event_btnEditItemMouseClicked

    /**
     * This button is used for saving a new item or saving changes to an existing item
     * @param evt 
     */
    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        if(this.newItem){
            //Insert item into the SQL tables
            if(uniqueShortName(txtShortName.getText())){
                try{
                    Double amount = Double.parseDouble(
                                    txtAmount.getText().replace(",", ""));
                    String sql1 = "INSERT INTO "
                            + "budgetitems (userid,itemtype,shortname,amount,description,frequency) "
                            + "VALUES ("+this.budgeteer.getUid()+", "
                            + "'"+jList1.getSelectedValue()+"', "
                            + "'"+txtShortName.getText()+"', "
                            + ""+amount+", '"+jTextArea1.getText()+"',1)";
                    Connection conn = SimpleDataSource.getConnection();
                    PreparedStatement stat1 = conn.prepareStatement(sql1);
                    stat1.executeUpdate();
                    txtStatusBar.setText("Item was successfully added");
                    txtStatusBar.setBackground(Color.lightGray);
                    txtStatusBar.repaint();
                } catch(Exception e){
                    System.out.println("ERROR: "+e.getMessage());
                }
            }
        }
        else {
            //Update already existing item in SQL tables
            try{
                Double amount = Double.parseDouble(
                                txtAmount.getText().replace(",", ""));
                String sql1 = "UPDATE budgetitems "
                        + "SET itemtype = '"+jList1.getSelectedValue()+"', "
                        + "amount = "+amount+", "
                        + "frequency = 1, description = '"+jTextArea1.getText()+"' "
                        + "WHERE userid = "+this.budgeteer.getUid()+" "
                        + "AND shortname = '"+txtShortName.getText()+"'";
                Connection conn = SimpleDataSource.getConnection();
                PreparedStatement stat1 = conn.prepareStatement(sql1);
                stat1.executeUpdate();
                txtStatusBar.setText("Item was successfully updated");
                txtStatusBar.setBackground(Color.lightGray);
                txtStatusBar.repaint();
                 btnSave.setText("Save New Item");
                txtShortName.setEditable(true);
                this.newItem = true;
            } catch(Exception e){
                System.out.println("ERROR: "+e.getMessage());
            }
        }
        loadTable();
        jList1.getSelectionModel().setSelectionInterval(0,0);
    }//GEN-LAST:event_btnSaveMouseClicked

    /**
     * Verify the short name is unique by calling the uniqueShortName
     * method after the field loses focus
     * @param evt 
     */
    private void txtShortNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtShortNameFocusLost
        // TODO add your handling code here:
        //Verify short name doesn't already exist
        if(this.newItem){
            boolean temp = uniqueShortName(txtShortName.getText());
        }
    }//GEN-LAST:event_txtShortNameFocusLost

    /**
     * checks to see if the item short name is unique
     * @param itemSN
     * @return 
     */
    private boolean uniqueShortName(String itemSN){
        ResultSet rs1;
	String sql1 = "SELECT * FROM budgetitems "
                + "WHERE shortname='"+itemSN+"' "
                + "AND userid = "+this.budgeteer.getUid()+"";
	try {
		Connection conn = SimpleDataSource.getConnection();
		PreparedStatement stat1 = conn.prepareStatement(sql1);
		rs1 = stat1.executeQuery();
		if (!rs1.next()==false){
			txtStatusBar.setText("Short Name already exists");
			txtStatusBar.setBackground(Color.red);
			txtStatusBar.repaint();
			return false;
		}
		else{
			txtStatusBar.setText("Short Name is valid");
			txtStatusBar.setBackground(Color.lightGray);
			txtStatusBar.repaint();
		}
		conn.close();
	} catch(Exception e){
		System.out.println("ERROR: "+e.getMessage());
		return false;
	}
	return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BudgetItemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BudgetItemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BudgetItemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BudgetItemsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BudgetItemsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton btnSave;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblItemType;
    private javax.swing.JLabel lblShortName;
    private javax.swing.JScrollPane lstItemType;
    private javax.swing.JTable tblItems;
    private javax.swing.JFormattedTextField txtAmount;
    private javax.swing.JTextField txtShortName;
    private javax.swing.JTextField txtStatusBar;
    // End of variables declaration//GEN-END:variables
}
